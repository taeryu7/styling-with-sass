Sass (Syntactically Awesome Style Sheets: 문법적으로 짱 멋진 스타일시트) 는 CSS pre-processor 로서, 
복잡한 작업을 쉽게 할 수 있게 해주고, 코드의 재활용성을 높여줄 뿐 만 아니라, 코드의 가독성을 높여주어 유지보수를 쉽게해준다.


Sass (Syntactically Awesome Style Sheets : 문법적으로 짱 멋진 스타일시트) 는 CSS pre-processor 로서, 복잡한 작업을 쉽게 할 수 있게 해주고,
코드의 재활용성을 높여줄 뿐 만 아니라, 코드의 가독성을 높여주어 유지보수를 쉽게해준다.

CSS pre-processor 란?
CSS 를 확장하는 스크립팅 언어로서, 컴파일러를 통하여 브라우저에서 사용 할 수 있는 일반 CSS 문법 형태로 변환해준다.

컴파일 방법
1. 오리지널 Ruby Sass 사용
gem install sass 로 설치하고, sass style.scss style.css 로 컴파일한다.

2. GUI 어플리케이션 사용하기 – Koala, Hammer, Compass 등

3. libsass 사용하기
C언어로 작성된 매우 빠른 Sass compiler로, 많은 환경에서 사용 할 수 있다.

어떤것을 선택하던지 무엇을 만드는지, 어떤 환경에서 작업을 하는지에 따라서 다 다르다.
이 메모에는 node 환경에서 libsass 를 사용 할 수 있게 해주는 node-sass 를 사용할 예정이다.

node-sass 사용하기
# NPM 을 통하여 node-sass 글로벌 설치
$ sudo npm install -g node-sass

# 컴파일하여 현재 디렉토리에 저장
$ node-sass style.scss -o .

# style.scss 파일에 변화가 있을 떄 마다 자동으로 리컴파일
$ node-sass style.scss -w -o .

※libsass 이 오리지널 Ruby Sass 에 비하여 훨씬 빠른 성능을 자랑하고 있다.
libsass는 Ruby Sass 의 기능의 100% 를 지원하지는 않는다.

https://www.sassmeister.com/ <- Sass코드 CSS로 변환시켜주는 사이트

☆ .SASS 와 .SCSS 의 차이
Sass 가 처음 릴리즈 되었을 때, 주 문법은 CSS와 많이 달랐는데, 
괄호 { } 대신 들여쓰기 (indentation) 을 사용하였으며 세미콜론 ; 을 사용하지 않고 단축 연산자를 사용했다.

아래와 같은 형태의 모습을 띄고있다.
=myclass // = means @ mixin
  font-size: 12px

p
  +myclass // + means @include

그 시절, 일부 개발자는 이 새로운 문법에 익숙하지 않아서, Sass 버전 3 이상부터는 주 문법이 .scss 로 변경되었다.
SCSS 는 CSS 의 상위집합으로서, CSS와 동일한 문법으로 SASS 의 특별한 기능들이 추가되어있다.

0. Comment (주석) 
Sass의 주석이 CSS 와 다른점은 한 줄 주석이 추가되었다는 점이다.
한 줄 주석은 // 로 표기하며,  CSS로 컴파일 되었을 때 나타나지 않는다.
여러 줄 주석은 CSS 와 동일하며 CSS 로 컴파일 되었을 때 나타난다.

☆Sass
/* You can See me */

// You can't see me

/* You
   Can
   See
   Mee
*/

☆CSS
/* You can See me */
/* You
   Can
   See
   Mee
*/

1. Variable (변수)
Sass 는 CSS에 변수 개념을 도입해준다.
변수로 사용 가능한 형태는 숫자, 문자열, 폰트, 색상, null, lists 와 maps 가 있다.
변수를 사용 할 떄는 $ 문자를 사용한다.

☆Sass
$primary-color: #333;

☆CSS
변수를 만들어도, 사용하지 않으면 컴파일된 CSS 파일에는 아무것도 나타나지 않는다.

아래는 body에서 사용한 예제이다.

☆Sass
$primary-color: #333;

body {
  background-color: $primary-color;
}

☆CSS
body {
  background-color: #333;
}

Variable Scope (변수 범위)
Sass 의 변수엔 변수범위가 있다. 변수를 특정 selector (선택자) 에서 선언하면 해당 selector 에서만 접근이 가능하다.

☆Sass
$primary-color: #333;
body {
  $primary-color: #eee;
  background-color: $primary-color;
}
p {
  color: $primary-color;
}

☆CSS
body {
  background-color: #eee;
}
p {
  color: #333;
}

변수를 선언 할 때, 변수를 global (전역) 하게 설정 할 때는 !global 플래그를 사용한다.

☆Sass
$primary-color: #333;
body {
  $primary-color: #eee !global;;
  background-color: $primary-color;
}
p {
  color: $primary-color;
}

☆CSS
body {
  background-color: #eee;
}
p {
  color: #eee;
}

!default 플래그는 해당 변수가 설정되지 않았거나 값이 null 일때 값을 설정한다.
이 플래그는 나중에 mixin 을 작성 할 떄 유용하게 사용된다.

☆Sass
$primary-color: #333;
$primary-color: $eee !default;
p {
  color: $primary-color;
}

☆CSS
p {
  color: #333;
}


2. Math Operators (수학 연산자)
Sass 에서는 수학 연산자들을 사용 할 수 있다. 지원되는 연산자는 아래와 같다.

Operator	Description
+	        addition
-	        subtraction
/	        division
*	        multiplication
%	        modulo
==	        equality
!=	        inequality

주의하실점은, +, - operator 를 사용 할 떄는 단위를 언제나 통일시켜야한다.
예를들어, 다음과 같은 코드는 오류가 발생하게된다. $box-width: 100% - 20px
이런 작업을 해야한다면 css 의 calc() 함수를 사용해야한다.
다음과 같은 식은 오류 없이 작동한다.  $box-width: 300px / 960px * 100%

☆Sass
.container { width: 100%; }
article[role="main"] {
  float: left;
  width: 600px / 960px * 100%;
}
aside[role="complementary"] {
  float: right;
  width: 300px / 960px * 100%;
}

☆CSS
.container {
  width: 100%;
}
article[role="main"] {
  float: left;
  width: 62.5%;
}
aside[role="complementary"] {
  float: right;
  width: 31.25%;
}

3. Built-in Functions (내장함수)
CSS 작업을 할때, 컬러팔레트툴로 적절한 색을 찾으려 한적이 있는데, 그런사람들을 위한 darken() 함수가 있다.
이 함수는 특정 색깔과, 얼마나 어둡게 할지 인수로 던져주면 자동으로 색상을 계산해서 나타내준다.

아래는 SCSS로 만든 예제이다.
// ----
// Sass (v3.4.4)
// Compass (v1.0.1)
// ----

$buttonColor: #2ecc71;
$buttonDark: darken($buttonColor, 10%);
$buttonDarker: darken($buttonDark, 10%);

button {
  background: $buttonColor;
  border-radius: 3px;
  box-shadow: 0px 5px 0px $buttonDark;
  border: 0;
  color: white;
  font-size: 17px;
  padding: 10px 30px;
  display: inline-block;
  outline: 0;
  &:hover {
    background: $buttonDark;
    box-shadow: 0px 5px 0px $buttonDarker;
  }
  &:active {
    box-shadow: none;
    margin-top: 5px;
  }
}

body {
  text-align: center;
  padding-top: 100px;
}

이 함수 외에도, 많은 유용한 함수들이 엄청 많다. 모든 내장함수들의 목록은 아래에 링크를 추가해놨다.
https://sass-lang.com/documentation/modules

색에 관한 함수들의 보이는 예제는 아래 링크를 추가해뒀다.
http://jackiebalzer.com/color

4. Nesting (중첩)
Sass 의 매우 유용한 기능중 하나는 선언을 중첩시킬 수 있다는 것이다. 어떻게 작동하는지, 또 어떤 점을 주의해야하는지 알아야한다.

일반 CSS 에선 특정 선택자 안의 선택자를 스타일링 하려면 아래처럼 코드를 작성했었다.

/* CSS */
.container {
    width: 100%;
}
.container h1 {
    color: red;
}
간단한 CSS 면, 큰 문제는 없지만, CSS 파일이 커지면 유지보수가 어려워진다.

Sass에서 아래처엄 작성하면 위의 코드랑 같은 결과물을 얻을 수 있다.
/* Sass */
.container {
    width: 100%;
    h1 {
        color: red;
    }
}

부모 선택자를 리퍼런스 할떄는 & 문자를 사용한다.

☆Sass
a {
  color: black;
  &:hover {
    text-decoration: underline;
    color: gray;
  }
  &:visited {
    color: purple;
  }
}

☆CSS
a {
  color: black;
}
a:hover {
  text-decoration: underline;
  color: gray;
}
a:visited {
  color: purple;
}
코드 중첩을 하는건 위와같이 하면 된다. 하지만 중첩에서 벗어나려면 어떻게 해야할까?

예를들어서 아래와 같은 코드가 있을 때
/* Sass */
.container {
  .child {
    color: blue;
  }
  .sibling {
    color: gray;
  }
}

sibling 클래스가 container 클래스 밖에서도 사용되는것을 알게되었을땐, @at-root directive (지시자) 를 사용한다.
☆Sass
.container {
  .child {
    color: blue;
  }
  @at-root .sibling {
    color: gray;
  }
}

☆CSS
.container .child {
  color: blue;
}
.sibling {
  color: gray;
}
위는 그냥 사용 예제일 뿐이고 사실상 이런 상황이 오면 코드를 잘라내서 밖에 붙여넣는게 맞다.

@at-root 는 Sass 코드를 깔끔하게 정리하면서 작성 할 때 사용된다.
https://benfrain.com/writing-modular-css-bemoocss-selectors-sass-3-3/

인셉션 규칙: Sass 코드 중첩을 할 때, 4 레벨 보다 깊게 들어가지 말 것
영화 인셉션에서 보면, 레벨 5의 꿈을 꾸게 될 땐 림보에 빠져서고생하게 되는데,
더 깊게 들어간다고해서 오류가 나거나 Sass 개발자가 화를 내지는 않지만, 코드가 복잡해지고 유지보수가 어려워진다.

5. Import (불러오기) 
import 기능은 스타일들을 여러 파일들로 나누고, 다른 파일에서 불러와서 사용하는 기능이다.
다음과 같이 @import directive 를 사용하여 특정.scss 파일을 불러 올 수 있다.
@import "layout.scss";
아래처럼 확장자를 붙이지 않아도 된다.
@import "layout";

partial
만약에 .sass 파일이나 .scss 파일의 파일이름을 underscore _ 로 시작하면 css 파일로 따로 컴파일되지 않는다.
html 에서 해당 css 파일을 불러올일이 없고, import 만 되는경우에는이 기능을 사용해야한다.

6. Extend (상속) 
Sass 에서 특정 선택자를 상속 할 때, @extend directive를 사용한다.

☆Sass
.box {
  border: 1px solid gray;
  padding: 10px;
  display: inline-block;
}
.success-box {
  @extend .box;
  border: 1px solid green;
}

☆CSS
.box, .success-box {
  border: 1px solid gray;
  padding: 10px;
  display: inline-block;
}
.success-box {
  border: 1px solid green;
}

Placeholder
Placeholder 선택자 % 를 사용하면 상속은 할 수 있지만 해당 선택자는 컴파일되지 않는다.

☆Sass
%box {
  padding: 0.5em;
}
.success-box {
  @extend %box;
  color: green;
}
.error-box {
  @extend %box;
  color: red;
}

☆CSS
.success-box, .error-box {
  padding: 0.5em;
}
.success-box {
  color: green;
}
.error-box {
  color: red;
}

7. Mixin (믹스인)
Mixin 은 Sass 의 아주 유용한 기능 중 하나다. extend 와 비슷하지만 argument (인수) 를 받을 수 있다.
mixin 을 선언 할 떄는@mixin directive 를 사용하며, 이를 사용 할 때는 @include directive 를 사용한다.

☆Sass
@mixin headline ($color, $size) {
  color: $color;
  font-size: $size;
}
h1 {
  @include headline(green, 12px);
}

☆CSS
h1 {
  color: green;
  font-size: 12px;
}

Mixin 을 응용하면 아래처럼 이런식으로도 사용가능하다.

☆Sass
@mixin media($queryString){
    @media #{$queryString} {
      @content;
    }
}
.container {
    width: 900px;
    @include media("(max-width: 767px)"){
        width: 100%;
    }
}

☆CSS
.container {
  width: 900px;
}
@media (max-width: 767px) {
  .container {
    width: 100%;
  }
}

#{ } 표현은 특정 문자열을 따로 처리하지않고 그대로 출력 할 때 사용된다.
@content directive 를 사용하면 나중에 @include 하였을 때, 그 선택자 내부의 내용들이 @conent 부분에 나타나게된다.

8. Function (함수)
Built-in Function 과는 달리 이부분은 임의 함수다.
Function은 위에있는 mixin과 비슷한듯 다른데, 차이점은 mixin 은 style markup 을 반환하지만,  function 은 @return directive 를 통하여 값 을 반환.
Function을 선언 할 때는 @function directive 를 사용한다.

☆Sass
@function calc-percent($target, $container) {
  @return ($target / $container) * 100%;
}
@function cp($target, $container) {
  @return calc-percent($target, $container);
}
.my-module {
  width: calc-percent(650px, 1000px);
}

☆CSS
.my-module {
  width: 65%;
}

팁: 자주 사용 할 것 같은 함수는 위와같이 단축함수를 만들어 사용하는게 편하다. 한다고해서 결과물의 용량은 안늘어난다.

